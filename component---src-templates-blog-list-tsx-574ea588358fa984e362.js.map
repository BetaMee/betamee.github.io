{"version":3,"sources":["webpack:///./src/templates/styles/list.module.scss","webpack:///./src/templates/BlogList.tsx"],"names":["module","exports","BlogList","data","pageContext","_edges","allMarkdownRemark","edges","currentPage","numPages","YearDateArr","map","node","frontmatter","date","split","displayEdges","Array","from","Set","_year","filter","_paginationNode","length","item","i","_key","_index","_selected","_isDot","currentTime","Date","getTime","className","styles","main","catalog","key","year","link","_dateArr","_MonthDay","pageTime","isNewPage","id","to","category","toLowerCase","uninqueid","title","newcontent","pagination","paginationItem","itemSelected"],"mappings":"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","file":"component---src-templates-blog-list-tsx-574ea588358fa984e362.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"list-module--main--_HL7O\",\"catalog\":\"list-module--catalog--ToZZ4\",\"item\":\"list-module--item--2P8EQ\",\"year\":\"list-module--year--fuRyw\",\"link\":\"list-module--link--1G28D\",\"date\":\"list-module--date--1rprK\",\"newcontent\":\"list-module--newcontent--2jgkA\",\"pagination\":\"list-module--pagination--4wgvY\",\"paginationItem\":\"list-module--paginationItem--127RG\",\"itemSelected\":\"list-module--itemSelected--3HOvN\"};","import React from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport styles from \"./styles/list.module.scss\";\nimport { IBlogLIstProps } from \"../interfaces\";\n\ninterface IPaginationNode {\n  _key: string;\n  _index: number;\n  _selected: boolean;\n  _isDot: boolean;\n}\n\nconst BlogList: React.FC<IBlogLIstProps> = ({ data, pageContext }) => {\n  // 数据源\n  const _edges = data.allMarkdownRemark.edges;\n  const { currentPage, numPages } = pageContext;\n  // 取日期\n  const YearDateArr = _edges.map(\n    ({ node }) => node.frontmatter.date.split(\"-\")[0]\n  );\n  const uniqueDateArr = Array.from(new Set(YearDateArr));\n  const displayEdges = uniqueDateArr.map((_year) => ({\n    _year: _year,\n    _edges: _edges.filter(\n      ({ node }) => node.frontmatter.date.split(\"-\")[0] === _year\n    ),\n  }));\n  // 分页标志符\n  let _paginationNode = [] as IPaginationNode[];\n  if (numPages <= 6) {\n    _paginationNode = Array.from({ length: numPages }, (item, i) => ({\n      _key: `${i} + ${numPages}`,\n      _index: i + 1,\n      _selected: i + 1 === currentPage,\n      _isDot: false,\n    }));\n  } else {\n    if (1 <= currentPage && currentPage <= 3) {\n      _paginationNode = Array.from({ length: 6 }, (item, i) => {\n        if (i <= 3) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: i + 1,\n            _selected: i + 1 === currentPage,\n            _isDot: false,\n          };\n        } else if (i === 5) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: numPages,\n            _selected: false,\n            _isDot: false,\n          };\n        } else {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: i + 1,\n            _selected: false,\n            _isDot: true,\n          };\n        }\n      });\n    } else if (numPages - 2 <= currentPage && currentPage <= numPages) {\n      _paginationNode = Array.from({ length: 6 }, (item, i) => {\n        if (2 <= i && i <= 5) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: numPages - (5 - i),\n            _selected: 5 - i === numPages - currentPage,\n            _isDot: false,\n          };\n        } else if (i === 0) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: i + 1,\n            _selected: false,\n            _isDot: false,\n          };\n        } else {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: i + 1,\n            _selected: false,\n            _isDot: true,\n          };\n        }\n      });\n    } else {\n      _paginationNode = Array.from({ length: 7 }, (item, i) => {\n        if (i === 0) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: i + 1,\n            _selected: false,\n            _isDot: false,\n          };\n        } else if (i === 6) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: numPages,\n            _selected: false,\n            _isDot: false,\n          };\n        } else if (i === 1 || i === 5) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: i + 1,\n            _selected: false,\n            _isDot: true,\n          };\n        } else {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: currentPage + (i - 3),\n            _selected: i === 3,\n            _isDot: false,\n          };\n        }\n      });\n    }\n  }\n  // 当前时间\n  const currentTime = new Date().getTime();\n  return (\n    <Layout>\n      <div className={styles.main}>\n        <div className={styles.catalog}>\n          {displayEdges.map((item) => (\n            <div key={item._year} className={styles.item}>\n              <div className={styles.year}>{item._year}</div>\n              <div className={styles.link}>\n                {item._edges.map(({ node }) => {\n                  const frontmatter = node.frontmatter;\n                  // 解析 M/D 格式\n                  const _dateArr = frontmatter.date.split(\"-\");\n                  const _MonthDay = `${_dateArr[1]}/${_dateArr[2]}`;\n                  // 解析是否是最新文章\n                  const pageTime = new Date(frontmatter.date).getTime();\n                  let isNewPage = false;\n                  if (\n                    pageTime < currentTime &&\n                    pageTime > currentTime - 1000 * 60 * 60 * 24 * 30\n                  ) {\n                    // 30 天以内\n                    isNewPage = true;\n                  }\n                  return (\n                    <div key={node.id}>\n                      <Link\n                        to={`/content/${frontmatter.category.toLowerCase()}-${frontmatter.uninqueid}`}\n                      >\n                        <span className={styles.date}>{_MonthDay}</span>\n                        {frontmatter.title}\n                      </Link>\n                      {isNewPage && (\n                        <span className={styles.newcontent}>new</span>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          ))}\n        </div>\n        {_paginationNode.length !== 0 && (\n          <div className={styles.pagination}>\n            {_paginationNode.map((item) => {\n              if (item._isDot) {\n                return (\n                  <span key={item._key} className={`${styles.paginationItem}`}>\n                    ...\n                  </span>\n                );\n              } else {\n                return (\n                  <Link\n                    key={item._key}\n                    to={`${item._index === 1 ? \"/\" : `/page/${item._index}`}`}\n                    className={`${styles.paginationItem} ${\n                      item._selected ? styles.itemSelected : \"\"\n                    }`}\n                  >\n                    {item._index}\n                  </Link>\n                );\n              }\n            })}\n          </div>\n        )}\n      </div>\n    </Layout>\n  );\n};\n\nexport default BlogList;\n\nexport const BlogListQuery = graphql`\n  query BlogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { ne: \"_about\" } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n            category\n            uninqueid\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}