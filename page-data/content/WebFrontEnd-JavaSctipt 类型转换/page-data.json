{"componentChunkName":"component---src-templates-blog-template-tsx","path":"/content/WebFrontEnd-JavaSctipt 类型转换/","result":{"data":{"site":{"siteMetadata":{"author":"橡树上","title":"十二棵橡树"}},"markdownRemark":{"id":"fa826d54-b115-58aa-91e2-76ea672d1740","html":"<!-- toc -->\n<ul>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F\">类型系统</a></li>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD\">类型判断</a></li>\n<li><a href=\"#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\">类型转换</a></li>\n<li><a href=\"#%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2\">隐式转换</a></li>\n<li><a href=\"#%E5%8F%82%E8%80%83%EF%BC%9A\">参考：</a></li>\n</ul>\n<!-- tocstop -->\n<h2 id=\"类型系统\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F\" aria-label=\"类型系统 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型系统</h2>\n<p>JavaScript 的类型分为基本类型（原始类型，或者称为 primitive values ）和引用类型（对象类型，reference values）。</p>\n<p>最新的 ECMAScript 标准定义了 8 种数据类型，其中七种基本类型和一种引用类型：</p>\n<p>基本类型：</p>\n<ul>\n<li>boolean</li>\n<li>null</li>\n<li>undefined</li>\n<li>string</li>\n<li>number</li>\n<li>bigInt</li>\n<li>symbol</li>\n</ul>\n<p>引用类型：</p>\n<ul>\n<li>Object</li>\n</ul>\n<p>基本类型的值是不可更改的，它们在内存中是以<strong>栈（Stack）的形式</strong>存放着，栈中的每一项是存放着<em>标识符和基本类型的值</em>，而与之不同的引用类型在栈中存放的是<em>标识符和地址值</em>，其中地址值引向<strong>堆（Heap）区</strong>，那里才是具体的存放数据的地方。</p>\n<p>引用类型中，有很多内置的高级对象，如 <em>Array</em>、<em>Date</em>、<em>RegExp</em>、<em>Math</em>、<em>Error</em>，这些对象有各自的属性和方法。</p>\n<h2 id=\"类型判断\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD\" aria-label=\"类型判断 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型判断</h2>\n<p>对类型判断一般使用 <code>typeof</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> bol <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n<span class=\"token keyword\">let</span> nll <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">let</span> udefd <span class=\"token operator\">=</span> <span class=\"token keyword\">undefined</span>\n<span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'str'</span>\n<span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">123</span>\n<span class=\"token keyword\">let</span> bigint <span class=\"token operator\">=</span> <span class=\"token number\">123n</span>\n<span class=\"token keyword\">let</span> smy <span class=\"token operator\">=</span>  <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">typeof</span> bol <span class=\"token comment\">// => boolean</span>\n<span class=\"token keyword\">typeof</span> nll <span class=\"token comment\">// => object</span>\n<span class=\"token keyword\">typeof</span> udefd <span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">typeof</span> str <span class=\"token comment\">// => string</span>\n<span class=\"token keyword\">typeof</span> num <span class=\"token comment\">// => number</span>\n<span class=\"token keyword\">typeof</span> bigint <span class=\"token comment\">// => bigint</span>\n<span class=\"token keyword\">typeof</span> smy <span class=\"token comment\">// => symbol</span></code></pre></div>\n<p>这里的 <code>typeof null == 'object'</code> 是属于历史遗留问题，不能被这个表象欺骗了，以为是对象，其实它是基本数据类型。具体细节可以参考 <a href=\"https://2ality.com/2013/10/typeof-null.html\">The history of “typeof null”</a>。</p>\n<h2 id=\"类型转换\" style=\"position:relative;\"><a href=\"#%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\" aria-label=\"类型转换 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>类型转换</h2>\n<p>下面罗列几种常见的不同类型之间的转换方式：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 数字转字符串：</span>\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => '123'</span>\n\n<span class=\"token comment\">// 字符串转数字</span>\n<span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1234'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//  => 123</span>\n<span class=\"token operator\">+</span><span class=\"token string\">'123'</span> <span class=\"token comment\">// => 123</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//  => 123</span>\n\n<span class=\"token comment\">// 数字检测</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token number\">123</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span>\n<span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">false</span>\n\n<span class=\"token comment\">// 字符串转数组</span>\n<span class=\"token string\">'fdasf'</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => [\"f\", \"d\", \"a\", \"s\", \"f\"]</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fdasf'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// => [\"f\", \"d\", \"a\", \"s\", \"f\"]</span></code></pre></div>\n<h2 id=\"隐式转换\" style=\"position:relative;\"><a href=\"#%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2\" aria-label=\"隐式转换 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>隐式转换</h2>\n<p>由于 JavaScript 是一门弱类型的语言，在变量的使用中会涉及到一个隐式转换的问题。</p>\n<p>隐式转换的有两个场景需要注意，一个是 <em>+操作符</em>，另一个是 <em>==操作符</em>。</p>\n<p><em>+操作符</em> 会隐式地将值转变为数字类型：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 字符串转数字</span>\n<span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span>\n<span class=\"token operator\">+</span><span class=\"token parameter\">str</span> <span class=\"token operator\">=></span> <span class=\"token number\">123</span>\n\n<span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">'fasd'</span>\n<span class=\"token operator\">+</span><span class=\"token parameter\">str2</span> <span class=\"token operator\">=></span> <span class=\"token number\">NaN</span>\n\n<span class=\"token comment\">// 数组转数字</span>\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">+</span><span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> <span class=\"token number\">0</span>\n\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">+</span><span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">let</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">+</span><span class=\"token parameter\">arr</span> <span class=\"token operator\">=></span> <span class=\"token number\">NaN</span>\n\n<span class=\"token comment\">//对象转数字</span>\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">+</span><span class=\"token parameter\">obj</span> <span class=\"token operator\">=></span> <span class=\"token number\">NaN</span></code></pre></div>\n<p>这里字符串转数字没有什么疑问，问题在于数组<code>[1]</code>和<code>[1,2]</code> 为啥一个能转成数字，另一个就是 NaN 呢？</p>\n<p>原因在于这里引用类型（如数组、对象）转换的时候会先调用<code>toString()</code>方法，变为字符串后再转为数字：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 等同于</span>\n<span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> arr2Str <span class=\"token operator\">=</span> arr2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '1'</span>\n<span class=\"token operator\">+</span><span class=\"token parameter\">arr2Str</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">let</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> arr3Str <span class=\"token operator\">=</span> arr2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '1,2'</span>\n<span class=\"token operator\">+</span><span class=\"token parameter\">arr3Str</span> <span class=\"token operator\">=></span> <span class=\"token number\">NaN</span>\n\n<span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> objStr <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// '[object Object]'</span>\n<span class=\"token operator\">+</span><span class=\"token parameter\">objStr</span> <span class=\"token operator\">=></span> <span class=\"token number\">NaN</span></code></pre></div>\n<p>同理，更为复杂的 <em>==操作符</em> 也是会内部进行一个隐式转换，转换的规则有如下：</p>\n<ol>\n<li>如果有一个操作数是布尔值，则先将其转换为数字，false => 0, true => 1</li>\n<li>如果有一个操作数为数字，另一个为字符串，则将字符串转为数字进行比较</li>\n<li>如果有一个操作数为对象，另一个不是对象，则将对象转为原始值（调用 <em>toString()</em> 方法）</li>\n<li>如果双方都是对象，则比较对象地址</li>\n</ol>\n<p>如下图总结所示：</p>\n<p><img src=\"type.png\" alt=\"类型转换\"></p>\n<p>这里有一个点需要理解的，布尔数转数字的场景，只有当布尔对象参数为以下值时，才为 false，其余都为 true：</p>\n<ul>\n<li>0</li>\n<li>-0</li>\n<li>null</li>\n<li>''</li>\n<li>false</li>\n<li>undefined</li>\n<li>NaN</li>\n</ul>\n<p>这样的话 <code>![]</code> 和 <code>!{}</code> 为 false，因为 <code>Boolean([])</code> 和 <code>Boolean({})</code> 都为 true。我们在判断空对象和空数组的时候千万要小心这样的陷进！</p>\n<p>而对于 Number 对象，也有一个潜在的坑，<code>Number(null)</code> 为 1，而 <code>Number(undefined)</code> 为 NaN。判类型的时候也要小心。</p>\n<p>所以按照上面的规则来分析常见的一到题目：<code>[] == ![]</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">// 等同于</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">!</span><span class=\"token function\">Boolen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ![] 是转布尔数，等同于!Boolen([])，等同于 false</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 满足第一条，false 转数字，为 0</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 满足第三条，ToPrimitive([]) 为 ''</span>\n<span class=\"token string\">''</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 满足第二条，字符串转数字，'' 转为 0</span>\n <span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 完美</span></code></pre></div>\n<p>而 <code>[1] == [1]</code> 为 false，是因为两者比较的都是地址，但两个对象地址是不一样的。</p>\n<h2 id=\"参考：\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83%EF%BC%9A\" aria-label=\"参考： permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考：</h2>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000008594792\">前端碎碎念 之 为什么[] == ![] ? - 前端开发之道 - SegmentFault 思否</a></li>\n</ul>","fields":{"slug":"/content/WebFrontEnd-JavaSctipt 类型转换/"},"frontmatter":{"title":"JavaSctipt 类型转换","category":"WebFrontEnd","tags":"JavaScript 语言特性","date":"2020-07-30"}}},"pageContext":{"slug":"/content/WebFrontEnd-JavaSctipt 类型转换/"}},"staticQueryHashes":["3649515864"]}