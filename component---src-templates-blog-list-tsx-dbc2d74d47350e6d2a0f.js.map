{"version":3,"sources":["webpack:///./src/templates/BlogList.tsx","webpack:///./node_modules/core-js/modules/es6.string.link.js","webpack:///./node_modules/core-js/modules/_string-html.js"],"names":["BlogList","data","pageContext","_edges","allMarkdownRemark","edges","currentPage","numPages","YearDateArr","map","edge","node","frontmatter","date","split","displayEdges","Array","from","Set","_year","filter","_paginationNode","length","item","i","_key","_index","_selected","_isDot","currentTime","Date","getTime","className","styles","main","catalog","key","year","link","_dateArr","_MonthDay","pageTime","isNewPage","id","to","fields","slug","title","newcontent","pagination","paginationItem","itemSelected","BlogListQuery","createHTML","url","this","$export","fails","defined","quot","string","tag","attribute","value","S","String","p1","replace","module","exports","NAME","exec","O","P","F","test","toLowerCase"],"mappings":"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","file":"component---src-templates-blog-list-tsx-dbc2d74d47350e6d2a0f.js","sourcesContent":["import React from 'react'\nimport { graphql, Link } from 'gatsby'\n\nimport Layout from '../components/layout'\n\nimport styles from './styles/list.module.scss'\n\nimport {\n  IBlogLIstProps\n} from '../interfaces'\n\ninterface IPaginationNode  {\n  _key: string,\n  _index: number,\n  _selected: boolean,\n  _isDot: boolean\n}\n\nconst BlogList: React.FC<IBlogLIstProps> = ({ data, pageContext }) => {\n  // 数据源\n  const _edges = data.allMarkdownRemark.edges\n  const {\n    currentPage,\n    numPages\n  } = pageContext\n  // 取日期\n  const YearDateArr = _edges.map(edge => edge.node.frontmatter.date.split('-')[0])\n  const uniqueDateArr = Array.from(new Set(YearDateArr))\n  const displayEdges = uniqueDateArr.map(_year => ({\n    _year: _year,\n    _edges: _edges.filter(edge => edge.node.frontmatter.date.split('-')[0] === _year)\n  }))\n  // 分页标志符\n  let _paginationNode = [] as IPaginationNode[]\n  if (numPages <= 6) {\n    _paginationNode = Array.from({length: numPages}, ((item, i) => ({\n      _key: `${i} + ${numPages}`,\n      _index: i + 1,\n      _selected: (i + 1) === currentPage,\n      _isDot: false\n    })))\n  } else {\n    if (1 <= currentPage && currentPage <= 3) {\n      _paginationNode = Array.from({length: 6}, ((item, i) => {\n        if (i <= 3) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: i + 1,\n            _selected: (i + 1) === currentPage,\n            _isDot: false\n          }\n        } else if (i === 5) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: numPages,\n            _selected: false,\n            _isDot: false\n          }\n        } else {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: i + 1,\n            _selected: false,\n            _isDot: true\n          }\n        }\n      }))\n    } else if (numPages - 2 <= currentPage && currentPage <= numPages) {\n      _paginationNode = Array.from({length: 6}, ((item, i) => {\n        if (2 <= i && i <= 5) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: numPages - (5 - i),\n            _selected: (5 - i) === (numPages - currentPage),\n            _isDot: false\n          }\n        } else if (i === 0) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: i + 1,\n            _selected: false,\n            _isDot: false\n          }\n        } else {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: i + 1,\n            _selected: false,\n            _isDot: true\n          }\n        }\n      }))\n    } else {\n      _paginationNode = Array.from({length: 7}, ((item, i) => {\n        if (i === 0) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: i + 1,\n            _selected: false,\n            _isDot: false\n          }\n        } else if (i === 6) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: numPages,\n            _selected: false,\n            _isDot: false\n          }\n        } else if (i === 1 || i === 5) {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: i + 1,\n            _selected: false,\n            _isDot: true\n          }\n        } else {\n          return {\n            _key: `${i} + ${numPages}`,\n            _index: currentPage + (i - 3),\n            _selected: i === 3,\n            _isDot: false\n          }\n        }\n      }))\n    }\n  }\n  // 当前时间\n  const currentTime = new Date().getTime()\n  return (\n    <Layout>\n      <div className={styles.main}>\n        <div className={styles.catalog}>\n          {displayEdges.map(item => (\n            <div key={item._year} className={styles.item}>\n              <div className={styles.year}>{item._year}</div>\n              <div\n                className={styles.link}\n              >{item._edges.map(({ node }) => {\n                // 解析 M/D 格式\n                const _dateArr = node.frontmatter.date.split('-')\n                const _MonthDay = `${_dateArr[1]}/${_dateArr[2]}`\n                // 解析是否是最新文章\n                const pageTime = new Date(node.frontmatter.date).getTime()\n                let isNewPage = false\n                if (pageTime < currentTime && pageTime > (currentTime - 1000 * 60 * 60 * 24 * 30)) { // 30 天以内\n                  isNewPage = true\n                }\n                return (\n                  <div key={node.id}>\n                    <Link\n                      to={node.fields.slug}\n                    >\n                      <span className={styles.date}>{_MonthDay}</span>\n                      {node.frontmatter.title}\n                    </Link>\n                    {\n                      isNewPage && <span className={styles.newcontent}>new</span>\n                    }\n                  </div>\n                )\n              })}\n              </div>\n            </div>\n          ))}\n        </div>\n        {_paginationNode.length !== 0 && (\n          <div className={styles.pagination}>\n            {_paginationNode.map(item => {\n              if (item._isDot) {\n                return (\n                  <span\n                    key={item._key}\n                    className={\n                      `${styles.paginationItem}`\n                    }\n                  >\n                    ...\n                  </span>\n                )\n              } else {\n                return (\n                    <Link\n                      key={item._key}\n                      to={`${item._index === 1 ? '/' : `/page/${item._index}`}`}\n                      className={\n                        `${styles.paginationItem} ${item._selected ? styles.itemSelected : ''}`\n                      }\n                    >\n                      {item._index}\n                    </Link>\n                )\n              }\n            })}\n          </div>\n        )}\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogList\n\nexport const BlogListQuery = graphql`\n  query BlogListQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: {\n        fields: [frontmatter___date],\n        order: DESC\n      },\n      filter: {\n        frontmatter: {\n          tags: {\n            ne: \"_about\"\n          }\n        }\n      },\n      limit: $limit,\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"YYYY-MM-DD\")\n            title\n          }\n        }\n\t    }\n    }\n  }\n`\n\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n"],"sourceRoot":""}